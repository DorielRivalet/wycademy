name: Check Package License Changes

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'package.json'
      - 'package-lock.json'

jobs:
  check-license-changes:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4

      - name: Checkout base branch for comparison
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base-branch

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0' # from .nvmrc

      - name: Install license-report
        run: npm install -g license-report

      - name: Ensure Dependencies are Installed
        run: npm ci

      - name: Generate license report for PR branch
        run: |
          license-report --output=json --fields=name --fields=licenseType --fields=installedVersion > pr-licenses.json

      - name: Generate license report for base branch
        run: |
          cd base-branch
          npm ci
          license-report --output=json --fields=name --fields=licenseType --fields=installedVersion > base-licenses.json
          mv base-licenses.json ..

      - name: Compare licenses and check for changes
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const core = require('@actions/core');
            const github = require('@actions/github');

            const baseLicenses = JSON.parse(fs.readFileSync('base-licenses.json', 'utf8'));
            const prLicenses = JSON.parse(fs.readFileSync('pr-licenses.json', 'utf8'));

            console.log("Base Licenses:", JSON.stringify(baseLicenses, null, 2));
            console.log("PR Licenses:", JSON.stringify(prLicenses, null, 2));

            const prTitle = github.context.payload.pull_request.title;
            let updatedPackageMatch = prTitle.match(/bump ([@\w\/-]+) from ([\d\.]+) to ([\d\.]+)/i);

            let packageName, oldVersion, newVersion;

            if (updatedPackageMatch) {
              packageName = updatedPackageMatch[1];
              oldVersion = updatedPackageMatch[2];
              newVersion = updatedPackageMatch[3];
              console.log(`Checking license changes for ${packageName} from v${oldVersion} to v${newVersion}`);
            } else {
              console.log("PR title format doesn't match expected pattern. Checking dependencies manually.");

              const baseNames = baseLicenses.map(pkg => pkg.name);
              const prNames = prLicenses.map(pkg => pkg.name);

              const newOrUpdatedPackages = prLicenses.filter(pkg =>
                !baseNames.includes(pkg.name) ||
                baseLicenses.find(basePkg => basePkg.name === pkg.name && basePkg.installedVersion !== pkg.installedVersion)
              );

              if (newOrUpdatedPackages.length === 0) {
                console.log("No package updates found.");
                return;
              }

              packageName = newOrUpdatedPackages[0].name;
              oldVersion = baseLicenses.find(pkg => pkg.name === packageName)?.installedVersion || "N/A";
              newVersion = newOrUpdatedPackages[0].installedVersion;
              console.log(`Detected package update: ${packageName} from v${oldVersion} to v${newVersion}`);
            }

            const oldPackageData = baseLicenses.find(pkg => pkg.name === packageName);
            const newPackageData = prLicenses.find(pkg => pkg.name === packageName);

            if (!oldPackageData) console.log(`Old package version (${packageName}) not found in base license report.`);
            if (!newPackageData) console.log(`New package version (${packageName}) not found in PR license report.`);

            if (!oldPackageData || !newPackageData) {
              console.log("Package not found in one or both reports, cannot compare licenses.");
              return;
            }

            const oldLicense = oldPackageData.licenseType;
            const newLicense = newPackageData.licenseType;

            console.log(`Previous license for ${packageName}@${oldVersion}: ${oldLicense}`);
            console.log(`New license for ${packageName}@${newVersion}: ${newLicense}`);

            if (oldLicense !== newLicense) {
              console.log(`⚠️ LICENSE CHANGE DETECTED: ${oldLicense} → ${newLicense}`);
              core.setFailed(`License change detected for ${packageName}: ${oldLicense} → ${newLicense}`);

              await github.rest.issues.createComment({
                owner: github.context.repo.owner,
                repo: github.context.repo.repo,
                issue_number: github.context.payload.pull_request.number,
                body: `⚠️ **License Change Detected**\n\nPackage \`${packageName}\` has changed license:\n- Previous: \`${oldLicense}\`\n- New: \`${newLicense}\`\n\nPlease review this change to ensure compliance.`
              });
            } else {
              console.log("✅ No license changes detected");
            }
